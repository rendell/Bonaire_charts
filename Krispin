---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file --> 

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, 
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%",
  message=FALSE, 
  warning=FALSE
)
 
library(coronavirus)
``` 
# coronavirus <a href='https://RamiKrispin.github.io/coronavirus/'><img src='man/figures/coronavirus.png' align="right"  /></a>

 
<!-- badges: start --->
[![build](https://github.com/RamiKrispin/coronavirus/workflows/build/badge.svg?branch=master)](https://github.com/RamiKrispin/coronavirus/actions?query=workflow%3Abuild)
[![CRAN\_Status\_Badge](https://www.r-pkg.org/badges/version/coronavirus)](https://cran.r-project.org/package=coronavirus)
[![lifecycle](https://img.shields.io/badge/lifecycle-maturing-blue.svg)](https://lifecycle.r-lib.org/articles/stages.html)
[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)
[![GitHub commit](https://img.shields.io/github/last-commit/RamiKrispin/coronavirus)](https://github.com/RamiKrispin/coronavirus/commit/master)
[![Downloads](https://cranlogs.r-pkg.org/badges/grand-total/coronavirus)](https://cran.r-project.org/package=coronavirus)

<!-- badges: end -->

The coronavirus package provides a tidy format dataset of the 2019 Novel Coronavirus COVID-19 (2019-nCoV) epidemic. The raw data pulled from the Johns Hopkins University Center for Systems Science and Engineering (JHU CCSE) Coronavirus [repository](https://github.com/CSSEGISandData/COVID-19).


More details available [here](https://RamiKrispin.github.io/coronavirus/), and a `csv` format of the package dataset available [here](https://github.com/RamiKrispin/coronavirus/tree/master/csv)

<img src="man/figures/2019-nCoV-CDC-23312_without_background.png" width="65%" align="center"/></a>

  <figcaption>Source: Centers for Disease Control and Prevention's Public Health Image Library </figcaption>

## Important Note

As this an ongoing situation, frequent changes in the data format may occur, please visit the package news to get updates about those changes

## Installation
Install the CRAN version:

```r
install.packages("coronavirus")
```

Install the Github version (refreshed on a daily bases):

``` r
# install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
```

## Data refresh

While the **coronavirus** [CRAN version](https://cran.r-project.org/package=coronavirus) is updated every month or two, the [Github (Dev) version](https://github.com/RamiKrispin/coronavirus) is updated on a daily bases. The `update_dataset` function enables to overcome this gap and keep the installed version with the most recent data available on the Github version:

``` r
library(coronavirus)
update_dataset()
```

**Note:** must restart the R session to have the updates available

Alternatively, you can pull the data using the [Covid19R](https://covid19r.github.io/documentation/) project [data standard format](https://covid19r.github.io/documentation/data-format-standard.html) with the `refresh_coronavirus_jhu` function:

```{r}
covid19_df <- refresh_coronavirus_jhu()
head(covid19_df)
```

## Dashboard

A supporting dashboard is available [here](https://ramikrispin.github.io/coronavirus_dashboard/)

[<img src="man/figures/dashboard.png" width="100%" />](https://ramikrispin.github.io/coronavirus_dashboard/)

## Usage


```{r}
data("coronavirus")
```


This `coronavirus` dataset has the following fields:

* `date` - The date of the summary
* `province` - The province or state, when applicable
* `country` - The country or region name
* `lat` - Latitude point
* `long` - Longitude point
* `type` - the type of case (i.e., confirmed, death)
* `cases` - the number of daily cases (corresponding to the case type)

```{r}
head(coronavirus)
```


Summary of the total confrimed cases by country (top 20):

```{r}
library(dplyr)
summary_df <- coronavirus %>% 
  filter(type == "confirmed") %>%
  group_by(country) %>%
  summarise(total_cases = sum(cases)) %>%
  arrange(-total_cases)
summary_df %>% head(20) 
```


Summary of new cases during the past 24 hours by country and type (as of `r max(coronavirus$date)`):

```{r}
library(tidyr)
coronavirus %>% 
  filter(date == max(date)) %>%
  select(country, type, cases) %>%
  group_by(country, type) %>%
  summarise(total_cases = sum(cases)) %>%
  pivot_wider(names_from = type,
              values_from = total_cases) %>%
  arrange(-confirmed)
  
```


# This is the one i'm using
##
###

```{r}
Cor <- as_tbl_time(covid19_df, index = date)
```

Plotting the total cases by type worldwide:

``` {r}
library(plotly)
t <- list(
  family = "arial",
  size = 14,
  color='gray')


Cor %>%
  filter(location_code=="NL-BQ1")%>%
  filter(date >= as.Date('2020-01-01') & date <= as.Date('2020-12-31'))%>%
  group_by(data_type, date) %>%
  summarise(total_cases = sum(value)) %>%
  pivot_wider(names_from = data_type, values_from = total_cases) %>%
  arrange(date) %>%
  mutate(active = cases_new - deaths_new - recovered_new) %>%
  mutate(active_total = cumsum(active),
                recovered_total = cumsum(recovered_new),
                death_total = cumsum(deaths_new)) %>%
  plot_ly(x = ~ date,
                  y = ~ active_total,
                  name = 'Active', 
                  fillcolor = '#1f77b4',
                  type = 'scatter',
                  mode = 'none', 
                  stackgroup = 'one') %>%
  add_trace(y = ~ death_total, 
             name = "Death",
             fillcolor = '#E41317') %>%
  add_trace(y = ~recovered_total, 
            name = 'Recovered', 
            fillcolor = 'forestgreen') %>%
  layout(title = "Distribution of Covid19 Cases BES islands",
         font=t,
         legend = list(x = 0.1, y = 0.9),
         yaxis = list(title = "Number of Cases"),
         xaxis = list(title = "Source: Johns Hopkins University Center for Systems Science and Engineering"))
```


```{r include=FALSE}
library(plotly)
p <- coronavirus %>% 
  group_by(type, date) %>%
  summarise(total_cases = sum(cases), .groups = "drop") %>%
  pivot_wider(names_from = type, values_from = total_cases) %>%
  arrange(date) %>%
  mutate(active = confirmed - death - recovered) %>%
  mutate(active_total = cumsum(active),
                recovered_total = cumsum(recovered),
                death_total = cumsum(death)) %>%
  plot_ly(x = ~ date,
                  y = ~ active_total,
                  name = 'Active', 
                  fillcolor = '#1f77b4',
                  type = 'scatter',
                  mode = 'none', 
                  stackgroup = 'one') %>%
  add_trace(y = ~ death_total, 
             name = "Death",
             fillcolor = '#E41317') %>%
  add_trace(y = ~recovered_total, 
            name = 'Recovered', 
            fillcolor = 'forestgreen') %>%
  layout(title = "Distribution of Covid19 Cases Worldwide",
         legend = list(x = 0.1, y = 0.9),
         yaxis = list(title = "Number of Cases"),
         xaxis = list(title = "Source: Johns Hopkins University Center for Systems Science and Engineering"))
orca(p, "man/figures/total_cases.svg")
```

<img src="man/figures/total_cases.svg" width="100%" />

Plot the confirmed cases distribution by counrty with treemap plot:

``` r
conf_df <- coronavirus %>% 
  filter(type == "confirmed") %>%
  group_by(country) %>%
  summarise(total_cases = sum(cases)) %>%
  arrange(-total_cases) %>%
  mutate(parents = "Confirmed") %>%
  ungroup() 
  
  plot_ly(data = conf_df,
          type= "treemap",
          values = ~total_cases,
          labels= ~ country,
          parents=  ~parents,
          domain = list(column=0),
          name = "Confirmed",
          textinfo="label+value+percent parent")
```


```{r include=FALSE}
conf_df <- coronavirus %>% 
  filter(type == "confirmed") %>%
  group_by(country) %>%
  summarise(total_cases = sum(cases), .groups = "drop") %>%
  arrange(-total_cases) %>%
  mutate(parents = "Confirmed") %>%
  ungroup() 
  
p <-   plot_ly(data = conf_df,
          type= "treemap",
          values = ~total_cases,
          labels= ~ country,
          parents=  ~parents,
          domain = list(column=0),
          name = "Confirmed",
          textinfo="label+value+percent parent")
  
orca(p, "man/figures/treemap_conf.svg")
```

<img src="man/figures/treemap_conf.svg" width="100%" />

## Data Sources

The raw data pulled and arranged by the Johns Hopkins University Center for Systems Science and Engineering (JHU CCSE) from the following resources:
